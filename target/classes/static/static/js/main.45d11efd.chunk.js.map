{"version":3,"sources":["http-common.js","services/tutorial.service.js","components/add-tutorial.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","data","http","post","AddTutorial","props","onChangeTitle","bind","onWeight_1","onWeight_2","onWeight_3","saveTutorial","newTutorial","state","graphPath","weight_1","weight_2","weight_3","submitted","e","this","setState","target","value","console","log","TutorialDataService","formulate","then","response","currentTutorial","catch","className","border","totalPath","onClick","htmlFor","type","id","required","onChange","name","Component","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.45d11efd.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://ec2-15-206-211-103.ap-south-1.compute.amazonaws.com:8080/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass TutorialDataService {\n  formulate(data) {\n\t    return http.post(\"/user/path\", data);\n\t  }\n}\n\nexport default new TutorialDataService();","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\n\nexport default class AddTutorial extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onWeight_1 = this.onWeight_1.bind(this);\n    this.onWeight_2 = this.onWeight_2.bind(this);\n    this.onWeight_3 = this.onWeight_3.bind(this);\n    this.saveTutorial = this.saveTutorial.bind(this);\n    this.newTutorial = this.newTutorial.bind(this);\n\n    this.state = {\n      graphPath: \"\",\n      weight_1: \"\",\n      weight_2: \"\",\n      weight_3: \"\",\n\n      submitted: false\n    };\n  }\n\n  onChangeTitle(e) {\n    this.setState({\n    \tgraphPath: e.target.value\n    });\n  }\n  \n  onWeight_1(e) {\n\t    this.setState({\n\t    \tweight_1: e.target.value\n\t    });\n\t  }\n  \n  onWeight_2(e) {\n\t    this.setState({\n\t    \tweight_2: e.target.value\n\t    });\n\t  }\n  \n  onWeight_3(e) {\n\t    this.setState({\n\t    \tweight_3: e.target.value\n\t    });\n\t  }\n  \n  saveTutorial() {\n    var data = {\n    \t\tgraphPath: this.state.graphPath,\n    \t\tweight_1:this.state.weight_1,\n    \t\tweight_2:this.state.weight_2,\n    \t\tweight_3:this.state.weight_3\n    };\n    console.log(data);\n    TutorialDataService.formulate(data)\n      .then(response => {\n        this.setState({\n        \tcurrentTutorial: response.data,\n\n          submitted: true\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  newTutorial() {\n    this.setState({\n      graphPath: \"\",\n      weight_1: \"\",\n      weight_2: \"\",\n      weight_3: \"\",\n\n      submitted: false\n    });\n  }\n\n  render() {\n\t  const { currentTutorial } = this.state;\n\t  return (\n      <div className=\"submit-form\">\n        {this.state.submitted ? (\n          <div>\n            \n            <div className=\"list row\">\n          \n            <div className=\"col-md-11\">\n              {currentTutorial ? (\n                <div border=\"1\">\n                  <div>\n                    <label>\n                      <strong>Total Path between A - C :</strong>\n                    </label>{\" \"}\n                    {currentTutorial.totalPath}\n                  </div>\n                  <div>\n                    <label>\n                      <strong>A-B-C:</strong>\n                    </label>{\" \"}\n                    {currentTutorial.weight_1}\n                  </div>\n                  <div>\n                  <label>\n                    <strong>A-E-B-C-D:</strong>\n                  </label>{\" \"}\n                  {currentTutorial.weight_2}\n                </div>\n                <div>\n                <label>\n                  <strong>A-E-D:</strong>\n                </label>{\" \"}\n                {currentTutorial.weight_3}\n              </div>\n                </div>\n              ) : (\n                <div>\n                  <br />\n                </div>\n              )}\n            </div>\n          </div>\n            \n            \n            \n            <button className=\"btn btn-success\" onClick={this.newTutorial}>\n              Back\n            </button>\n          </div>\n        ) : (\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"graphPath\">Graph String</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"graphPath\"\n                required\n                value={this.state.graphPath}\n                onChange={this.onChangeTitle}\n                name=\"graphPath\"\n              />\n            </div>\n            <div className=\"form-group\">  \n              <label htmlFor=\"weight_1\">Weight 1</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"weight_1\"\n                required\n                value={this.state.weight_1}\n                onChange={this.onWeight_1}\n                name=\"weight_1\"\n              />\n            </div>\n            <div className=\"form-group\">  \n              <label htmlFor=\"weight_2\">Weight 2</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"weight_2\"\n                required\n                value={this.state.weight_2}\n                onChange={this.onWeight_2}\n                name=\"weight_2\"\n              />\n            </div>\n              <div className=\"form-group\">  \n              <label htmlFor=\"weight_3\">Weight 3</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"weight_3\"\n                required\n                value={this.state.weight_3}\n                onChange={this.onWeight_3}\n                name=\"weight_3\"\n              />\n            </div>  \n\n            <button onClick={this.saveTutorial} className=\"btn btn-success\">\n              Submit\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddTutorial from \"./components/add-tutorial.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/\"} className=\"navbar-brand\">\n            Amazon\n          </Link>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n           \n            <Route exact path={[\"/\", \"/add\"]} component={AddTutorial} />\n\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter  } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}